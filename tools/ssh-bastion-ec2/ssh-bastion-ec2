#!/usr/bin/env python3

# SPDX-License-Identifier: Apache-2.0
#
# The OpenSearch Contributors require contributions made to
# this file be licensed under the Apache-2.0 license or a
# compatible open source license.

import base64
import logging
import os
import random
import subprocess
import sys
import tempfile

from argparse import ArgumentParser

import boto3
from botocore.exceptions import ClientError

logger = logging.getLogger()


def get_bastion_ips(tag_name, tag_value):
  session = boto3.session.Session()
  ec2 = session.client(service_name='ec2')
  response = ec2.describe_instances(
    Filters=[
      {
        'Name': 'tag:' + tag_name,
        'Values': [tag_value]
      },
    ]
  )
  bastion_ips = []
  for reservations in response['Reservations']:
    for instance in reservations['Instances']:
      bastion_ips.append(instance['PublicIpAddress'])
  logger.info("BASTION_IPs: %s", bastion_ips)
  return bastion_ips


def get_secret(secret_name):
  """
  Utility method to retrieve the private key from AWS Secrets Manager
  """
  session = boto3.session.Session()
  client = session.client(
    service_name='secretsmanager'
  )

  # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
  # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
  # We rethrow the exception by default.

  try:
    get_secret_value_response = client.get_secret_value(SecretId=secret_name)
  except ClientError as e:
    if e.response['Error']['Code'] == 'DecryptionFailureException':
      # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
      # Deal with the exception here, and/or rethrow at your discretion.
      raise e
    elif e.response['Error']['Code'] == 'InternalServiceErrorException':
      # An error occurred on the server side.
      # Deal with the exception here, and/or rethrow at your discretion.
      raise e
    elif e.response['Error']['Code'] == 'InvalidParameterException':
      # You provided an invalid value for a parameter.
      # Deal with the exception here, and/or rethrow at your discretion.
      raise e
    elif e.response['Error']['Code'] == 'InvalidRequestException':
      # You provided a parameter value that is not valid for the current state of the resource.
      # Deal with the exception here, and/or rethrow at your discretion.
      raise e
    elif e.response['Error']['Code'] == 'ResourceNotFoundException':
      # We can't find the resource that you asked for.
      # Deal with the exception here, and/or rethrow at your discretion.
      raise e
  else:
    # Decrypts secret using the associated KMS CMK.
    # Depending on whether the secret is a string or binary, one of these fields will be populated.
    if 'SecretString' in get_secret_value_response:
      secret = get_secret_value_response['SecretString']
      return secret
    else:
      decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])
      return decoded_binary_secret


def get_local_private_key(key_file_path):
  """
  Utility method to retrieve the private key from AWS Secrets Manager

  :key_file_path Absolute key file path or name ok key file in local directory
  File paths with ~ (HOME directory) not supported yet. Paths like ~/my-example-key will not resolve correctly
  """

  key_path = os.path.abspath(key_file_path)
  pk = None
  try:
    with open(key_path, "r") as f:
      pk = f.read()
    return pk
  except Exception as e:
    logger.exception("Failed reading key from ", key_path)
    raise e


def ssh_ec2(remote_host, bastion_ip, key):
  """Spawn an ssh session to ec2 host.

  Minimally an ec2 host must be provided.
  The key is written to a secure temp file and removed upon failure to
  spawn an ssh session or completion of the ssh session.

  """
  tmp_key_path = None
  retVal = 1
  try:
    tmp_key_path, ssh_cmd = _get_ssh_command(remote_host, bastion_ip, key)
    logger.info("SSH_COMMAND: %s", ' '.join(ssh_cmd))
    retVal = subprocess.call(ssh_cmd)
  except Exception as e:
    # It is bad practice to except on any exception but we want to remove
    # the tmp ssh key regardless of what might happen.
    logger.exception("SSH failed with exception: ")
  finally:
    if tmp_key_path:
      os.remove(tmp_key_path)
  return retVal


def _get_ssh_command(remote_host, bastion_ip, key):
  """returns the ssh command and the file path for the temp key. Caller should make sure to remove the file."""
  tmp_key_fd, tmp_key_path = tempfile.mkstemp(text=True)
  user = "ec2-user"
  template = "{}@{}"
  try:
    with os.fdopen(tmp_key_fd, "w") as f:
      f.write(key)

    command = ['/usr/bin/ssh', '-o', 'StrictHostKeyChecking=accept-new', '-A',
               '-i', tmp_key_path, '-J', template.format(user, bastion_ip), template.format(user, remote_host)]

    return tmp_key_path, command
  except Exception as e:
    logger.exception("Failed while writing temp key to file")
    os.remove(tmp_key_path)
    raise e


def parse_arguments(argv):
  p = ArgumentParser(description='SSH to a OpenSearch EC2 host')
  p.add_argument('remote_host', help='Host name or private IP address for the EC2 instance')
  p.add_argument('-s', '--secret-name', dest='secret_name',
                 help='Name of secret name to retrieve from AWS Secrets Manager')
  p.add_argument('-k', '--key-path', dest='local_key_path',
                 help='File path to local private key')
  p.add_argument('-u', '--user', dest='user', default="ec2-user",
                 help='User to login, same for both bastion and remote host')
  p.add_argument('-tn', '--tag-name', dest='tag_name', default="role",
                 help='Tag name to discover EC2 bastion hosts ')
  p.add_argument('-tv', '--tag-value', dest='tag_value', default="opensearch-bastion-hosts",
                 help='Tag value to discover EC2 bastion hosts for give tag name')
  p.add_argument('-l', '--log', dest='log_level', default='WARN',
                 help='Log level')
  args = p.parse_args(argv)
  return args


def initialize_logging(log_level):
  numeric_level = getattr(logging, log_level.upper(), None)
  if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level: %s' % log_level)

  logging.basicConfig(level=numeric_level, format='[%(levelname)s] %(message)s')


def get_random_bastion_ip(tag_name, tag_value):
  ip_list = get_bastion_ips(tag_name, tag_value)
  return random.choice(ip_list) if ip_list else None


def __main__(argv):
  args = parse_arguments(argv)
  initialize_logging(args.log_level)
  bastion_ip = get_random_bastion_ip(args.tag_name, args.tag_value)
  if not bastion_ip:
    logger.error("No bastion host IPs found. Exiting!")
    sys.exit(1)

  if args.local_key_path:
    ssh_ec2(args.remote_host, bastion_ip, get_local_private_key(args.local_key_path))
  elif args.secret_name:
    ssh_ec2(args.remote_host, bastion_ip, get_secret(args.secret_name))
  else:
    logger.error("No private key supplier provided. Exiting!")
    sys.exit(2)


if __name__ == '__main__':
  sys.exit(__main__(sys.argv[1:]))
